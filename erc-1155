// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/finance/PaymentSplitter.sol";
contract MyToken is ERC1155, Ownable, Pausable, ERC1155Supply , PaymentSplitter {
    constructor(
        address[] memory _payees,
        uint[] memory _shares
    )
        ERC1155("ipfs:///")
        PaymentSplitter(_payees, _shares)
    {}

    uint256 public publicPrice = 0.0000001 ether ;
    uint256 public OGPrice = 0.00000001 ether ;
    uint256 public maxSupply = 20;
    uint maxPerWallet = 3; 
    bool publicTime = false ;
    bool ogTime = false ;
    mapping (address => bool ) Allowlist;
    mapping(address => uint256) PurchasesPerWallet;

    function setURI(string memory newuri) public onlyOwner {
        _setURI(newuri);
    }

    function pause() public onlyOwner { 
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }
    // Allowlist function 
    function AllowlistOG(address[] calldata addresses) external onlyOwner {
       for(uint i ; i < addresses.length ; i++){
           Allowlist[addresses[i]] = true ;
       }
    }

    function uri(uint id) public view virtual  override returns (string memory){
       require(exists(id),"doesnt exist");
       return  string(abi.encodePacked(super.uri(id), Strings.toString(id), ".json"));
    } 
    // withdraw function 
    function withdraw(address _add) external onlyOwner {
       uint balance = address(this).balance ;
       payable(_add).transfer(balance);
    }

    // open the mint  
    function mintTime(bool _public, bool _og) public onlyOwner {
         publicTime = _public;
         ogTime = _og; 
    }
    function Mint(uint id, uint amount) internal {
        require( PurchasesPerWallet[msg.sender] + amount <= maxPerWallet, "u cant mint anymore");
        require(id < 2 , "Sorry u look like u want to mint a wrong nft");
        require(totalSupply(id) <= maxSupply, "all the nfts has minted");
        _mint(msg.sender, id, amount,"");
        PurchasesPerWallet[msg.sender] += amount ;
    }

    // OG mint 
    function OGMint(uint id, uint amount) public payable {
        require(Allowlist[msg.sender], "u're not an OG u muthefucka");
        require(ogTime, "mint closed");
        require(msg.value == OGPrice * amount, "WRONG !! Not Enough Money Sent");
        Mint(id,amount);
    }
     
     //set max  supply
    function publicMint( uint256 id, uint256 amount)
        public
        payable

    {
        require(publicTime, "mint closed");
        require(msg.value == publicPrice * amount, "WRONG !! Not Enough Money Sent");
        _mint(msg.sender, id, amount,"");
        Mint(id,amount);
    }

    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)
        public
        onlyOwner
    {
        _mintBatch(to, ids, amounts, data);
    }

    function _beforeTokenTransfer(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)
        internal
        whenNotPaused
        override(ERC1155, ERC1155Supply)
    {
        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);
    }
}
